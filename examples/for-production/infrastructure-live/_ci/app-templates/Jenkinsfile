/*
* APPLICATION CI/CD CONFIGURATION
*
* This configures CircleCI to implement a CI/CD pipeline for application code. Refer to the Gruntwork Production
* Deployment Guide, "How to configure a production-grade CI/CD workflow for infrastructure code"
* (https://gruntwork.io/guides/automations/how-to-configure-a-production-grade-ci-cd-setup-for-apps-and-infrastructure-code/)
* for details on how the pipeline is setup.
*
* The following pipeline is implemented in this configuration:
*
* - For any commit on any branch, build a new docker image using the commit SHA.
* - For commits to main, deploy the built image to the dev environment.
* - For release tags, deploy the built image to the stage environment.
*/

pipeline {
    agent any

    environment {
        REGION = "us-west-2"

        /* TODO: update the following on installation to your repositories. */
        DEV_DEPLOY_PATH = "dev/us-west-2/dev/services/<YOUR SERVICE CONFIG>"
        STAGE_DEPLOY_PATH = "stage/us-west-2/stage/services/<YOUR SERVICE CONFIG>"
        IMAGE_TAG_VARNAME = "tag"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('BuildEnv') {
            steps {
                withCredentials([string(credentialsId: 'machine-user-oauth-token', variable: 'GITHUB_OAUTH_TOKEN')]) {
                    script {
                        docker.build('buildenv:snapshot', '--build-arg GITHUB_OAUTH_TOKEN _ci')
                    }
                }
            }
        }

        stage('BuildImage') {
            agent {
                docker {
                    image 'buildenv:snapshot'
                    args  '-v /etc/passwd:/etc/passwd'
                }
            }

            steps {
                sh '''
                    # aws-auth expects USER to be set
                    export USER=jenkins
                    ./_ci/scripts/build-docker-image.sh "$REGION" "$GIT_COMMIT" "$GIT_COMMIT"
                '''
            }
        }

        stage('DeployDev') {
            agent {
                docker {
                    image 'buildenv:snapshot'
                    args  '-v /etc/passwd:/etc/passwd'
                }
            }

            when {
                branch 'main'
            }

            steps {
                sh '''
                    # aws-auth expects USER to be set
                    export USER=jenkins
                    ./_ci/scripts/deploy-docker-image.sh "$REGION" "$GIT_COMMIT" "$DEV_DEPLOY_PATH" "$IMAGE_TAG_VARNAME"
                 '''
            }
        }

        stage('DeployStage') {
            agent {
                docker {
                    image 'buildenv:snapshot'
                    args  '-v /etc/passwd:/etc/passwd'
                }
            }

            when {
                tag '*'
            }

            steps {
                sh '''
                    # aws-auth expects USER to be set
                    export USER=jenkins
                    ./_ci/scripts/deploy-docker-image.sh "$REGION" "$GIT_COMMIT" "$STAGE_DEPLOY_PATH" "$IMAGE_TAG_VARNAME"
                 '''
            }
        }
    }
}
